<!-- _includes/nav.njk --> 
<nav>
    <!-- TOP SECTION: Logo + Status -->
    <div class="nav-section top-nav">
        <!-- Left side of the top section -->
        <div class="nav-left top-nav-left">
            <!-- First line: site title + latest log text -->
            <div class="site-title-and-latest-log">
                <a href="/" class="title nav-link sitemap-title-toggle" data-sitemap-toggle="true" onclick="if(window.toggleSitemap){window.toggleSitemap();return false;}" title="Click to view site map">dame.is</a>
                <!-- Dynamically filled by JS -->
                <span id="recent-log-container">
                    <div>
                        <span id="recent-log-text">loading status...</span>
                        <span id="recent-log-time"></span>
                    </div>
                </span>
            </div>
        </div>
    </div>

    <!-- PINNED LINKS SECTION -->
    <div class="nav-section bottom-nav nav-pinned-links">
        <div class="nav-left bottom-nav-left">
            <div class="nav-links-scroll-container">
                <div class="nav-links-scroll-content">
                    {# Get all pages with pinned: true #}
                    {% set pinnedPages = collections.all | filterPinned %}
                    
                    {# Create 4 sets of links for smooth scrolling #}
                    {% for i in range(0, 6) %}
                    <div class="nav-links">
                        {% for pinnedPage in pinnedPages %}
                        {% set currentUrl = page.url | replace('/index.html', '/') %}
                        {% set pinnedUrl = pinnedPage.url | replace('/index.html', '/') %}
                        {% set isActive = currentUrl == pinnedUrl or currentUrl.startsWith(pinnedUrl) %}
                        <a href="{{ pinnedUrl }}" 
                           class="nav-link {% if isActive %}active{% endif %}"
                           data-current="{{ currentUrl }}"
                           data-pinned="{{ pinnedUrl }}"
                           data-is-active="{{ isActive }}"
                           {% if isActive %}aria-current="page"{% endif %}>
                            {{ pinnedPage.data.title }}
                        </a>
                        {% endfor %}
                    </div>
                    {% endfor %}
                </div>
            </div>
        </div>
    </div>

    <!-- SOCIAL ICONS SECTION -->
    <div class="nav-section bottom-nav nav-social-icons">
        <div class="nav-right bottom-nav-right">
            <!-- Bluesky Icon -->
            <a href="https://bsky.app/profile/did:plc:gq4fo3u6tqzzdkjlwzpb23tj" target="_blank" rel="noopener noreferrer" class="nav-icon nav-icon-bluesky" aria-label="Bluesky Profile">
                <svg class="icon icon-bluesky fa-bluesky" fill="currentColor">
                    <use href="/assets/icons/icons-sprite.svg#icon-bluesky"></use>
                </svg>
            </a>
        
            <!-- GitHub Icon -->
            <a href="https://github.com/dame-is" target="_blank" rel="noopener noreferrer" class="nav-icon nav-icon-github" aria-label="GitHub Profile">
                <svg class="icon icon-github fa-github" fill="currentColor">
                    <use href="/assets/icons/icons-sprite.svg#icon-github"></use>
                </svg>
            </a>

            <!-- Discord Icon -->
            <a href="https://discord.gg/95ypHb2qPE" target="_blank" rel="noopener noreferrer" class="nav-icon nav-icon-discord" aria-label="Discord Server">
                <svg class="icon icon-discord fa-discord" fill="currentColor">
                    <use href="/assets/icons/icons-sprite.svg#icon-discord"></use>
                </svg>
            </a>

            <!-- Arena Icon -->
            <a href="https://are.na/dame" target="_blank" rel="noopener noreferrer" class="nav-icon nav-icon-arena" aria-label="Are.na Profile">
                <svg class="icon icon-arena fa-arena" fill="currentColor">
                    <use href="/assets/icons/icons-sprite.svg#icon-arena"></use>
                </svg>
            </a>

            <!-- Dharma Icon -->
            <a href="#" class="nav-icon nav-icon-dharma" aria-label="Dharma" id="dharma-toggle-button">
                <svg class="icon icon-dharma fa-dharmna" fill="currentColor">
                    <use href="/assets/icons/icons-sprite.svg#icon-dharma"></use>
                </svg>
            </a>

            <!-- Hourglass Icon -->
            <a href="#" class="nav-icon nav-icon-hourglass" aria-label="Hourglass" id="hourglass-toggle-button">
                <svg class="icon icon-hourglass fa-hourglass" fill="currentColor">
                    <use href="/assets/icons/icons-sprite.svg#icon-hourglass"></use>
                </svg>
            </a>

            <!-- House Icon -->
            <a href="/" class="nav-icon nav-icon-house" aria-label="House">
                <svg class="icon icon-house fa-house" fill="currentColor">
                    <use href="/assets/icons/icons-sprite.svg#icon-house"></use>
                </svg>
            </a>
        </div>
    </div>

    <!-- STATS SECTION -->
    <div class="nav-section bottom-nav nav-stats">
        <div class="nav-left bottom-nav-left">
            <span id="bluesky-stats">
                <span style="font-weight: bold;" id="followers">0</span> followers
                <span style="font-weight: bold; padding-left: 5px;" id="following">0</span> following
            </span>
        </div>
    </div>

    <!-- FILEPATH SECTION -->
    <!-- <div class="nav-section bottom-nav filepath-nav">
        <div class="nav-left bottom-nav-left">
            <span class="sitemap-nav-toggle" title="Open site map"><span>üó∫Ô∏è</span></span>
            <div class="filepath-links">
                <span class="filepath-link">
                    <a href="/" class="filepath-segment">dame.is</a>
                </span>
                {% set pathSegments = page.url | split('/') | filter %}
                {% set currentPath = '' %}
                {% for segment in pathSegments %}
                    {% if segment and segment != '' %}
                        {% set currentPath = currentPath + '/' + segment %}
                        {% if not loop.last or segment != 'index.html' %}
                            <span class="filepath-separator">/</span>
                            <span class="filepath-link">
                                <a href="{{ currentPath }}" class="filepath-segment">{{ segment }}</a>
                            </span>
                        {% endif %}
                    {% endif %}
                {% endfor %}
            </div>
        </div>
    </div> -->
</nav>

<!-- Dharma Popup -->
<div id="dharma-backdrop" class="settings-backdrop"></div>
<div id="dharma-popup" class="settings-popup">
    <div class="settings-popup-header">
        <div class="settings-title-container">
            <h3 class="settings-title">Random Koan</h3>
            <div class="settings-subtitle">from The Gateless Gate</div>
        </div>
        <div class="settings-header-actions">
            <button id="dharma-close-button" class="settings-close-button" aria-label="Close koan">
                <span>‚úï</span>
            </button>
        </div>
    </div>
    <div class="settings-popup-content">
        <div id="dharma-content" class="settings-content">
            <!-- Koan text will be loaded here -->
        </div>
    </div>
</div>

<!-- Hourglass Popup -->
<div id="hourglass-backdrop" class="settings-backdrop"></div>
<div id="hourglass-popup" class="settings-popup">
    <div class="settings-popup-header">
        <div class="settings-title-container">
            <h3 class="settings-title">Time</h3>
            <div class="settings-subtitle">dame.is</div>
        </div>
        <div class="settings-header-actions">
            <button id="hourglass-close-button" class="settings-close-button" aria-label="Close time">
                <span>‚úï</span>
            </button>
        </div>
    </div>
    <div class="settings-popup-content">
        <div id="hourglass-content" class="settings-content">
            <div id="current-time" class="time-display"></div>
            <div id="day-of-year" class="time-display"></div>
            <div id="current-date" class="time-display"></div>
            <div id="life-days" class="time-display"></div>
        </div>
    </div>
</div>

<script>
// Koan data - dynamically loaded from _data/koans.js
const koans = {{ koans | dump | safe }};

// Function to convert markdown to HTML with enhanced support
function markdownToHtml(markdown) {
    // First, combine consecutive blockquotes into a single blockquote
    let processedMarkdown = markdown.replace(/^>(.*?)$([\n\r]*?)(?=>|$)/gm, (match, content) => {
        // Trim whitespace but preserve line breaks within the blockquote
        return `> ${content.trim()}\n`;
    });

    return processedMarkdown
        // Convert blockquotes (now handling multi-line quotes better)
        .replace(/^> (.*?)$([\n\r]*?(?:^> .*?$[\n\r]*?)*)/gm, (match) => {
            // Remove the '> ' prefix from each line and wrap in blockquote
            const content = match.replace(/^> /gm, '');
            return `<blockquote>${content}</blockquote>`;
        })
        // Convert headers
        .replace(/^# (.*$)/gm, '<h1>$1</h1>')
        .replace(/^## (.*$)/gm, '<h2>$1</h2>')
        .replace(/^### (.*$)/gm, '<h3>$1</h3>')
        // Convert italics
        .replace(/_([^_]+)_/g, '<em>$1</em>')
        // Convert bold
        .replace(/\*\*([^*]+)\*\*/g, '<strong>$1</strong>')
        // Convert code blocks
        .replace(/```([^`]+)```/g, '<pre><code>$1</code></pre>')
        // Convert links
        .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2">$1</a>')
        // Convert lists
        .replace(/^\* (.*$)/gm, '<li>$1</li>')
        // Convert paragraphs (must come last)
        .split('\n\n').map(para => {
            if (para.startsWith('<')) return para; // Skip if it's already HTML
            return `<p>${para.replace(/\n/g, '<br>')}</p>`;
        }).join('\n');
}

// Function to toggle popups
function togglePopup(popupId, backdropId) {
    const popup = document.getElementById(popupId);
    const backdrop = document.getElementById(backdropId);
    
    if (popup.classList.contains('open')) {
        popup.classList.remove('open');
        backdrop.classList.remove('open');
        document.body.classList.remove('settings-open');
    } else {
        popup.classList.add('open');
        backdrop.classList.add('open');
        document.body.classList.add('settings-open');
    }
}

// Function to load random koan
async function loadRandomKoan() {
    const randomIndex = Math.floor(Math.random() * koans.length);
    try {
        const response = await fetch(koans[randomIndex]);
        const markdown = await response.text();
        const html = markdownToHtml(markdown);
        document.getElementById('dharma-content').innerHTML = html;
    } catch (error) {
        console.error('Error loading koan:', error);
    }
}

// Function to update time display
function updateTimeDisplay() {
    const now = new Date();
    const birthDate = new Date('1993-05-07');
    const startOfYear = new Date(now.getFullYear(), 0, 0);
    const diff = now - startOfYear;
    const oneDay = 1000 * 60 * 60 * 24;
    const dayOfYear = Math.floor(diff / oneDay);
    const lifeDays = Math.floor((now - birthDate) / oneDay) + 1;
    
    // Calculate current year of life (age)
    const age = Math.floor((now - birthDate) / (oneDay * 365.25));

    document.getElementById('current-time').textContent = now.toLocaleTimeString('en-US', { 
        timeZone: 'America/New_York',
        hour12: true,
        hour: 'numeric',
        minute: '2-digit',
        second: '2-digit'
    }) + ' EST';
    document.getElementById('day-of-year').textContent = `Day ${dayOfYear} / 365`;
    document.getElementById('current-date').textContent = now.toLocaleDateString('en-US', { 
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });
    document.getElementById('life-days').textContent = `Day ${lifeDays} / Year ${age}`;
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    // Dharma popup functionality
    const dharmaButton = document.getElementById('dharma-toggle-button');
    const dharmaCloseButton = document.getElementById('dharma-close-button');
    const dharmaBackdrop = document.getElementById('dharma-backdrop');

    dharmaButton.addEventListener('click', (e) => {
        e.preventDefault();
        loadRandomKoan();
        togglePopup('dharma-popup', 'dharma-backdrop');
    });
    dharmaCloseButton.addEventListener('click', () => togglePopup('dharma-popup', 'dharma-backdrop'));
    dharmaBackdrop.addEventListener('click', () => togglePopup('dharma-popup', 'dharma-backdrop'));

    // Hourglass popup functionality
    const hourglassButton = document.getElementById('hourglass-toggle-button');
    const hourglassCloseButton = document.getElementById('hourglass-close-button');
    const hourglassBackdrop = document.getElementById('hourglass-backdrop');

    hourglassButton.addEventListener('click', (e) => {
        e.preventDefault();
        updateTimeDisplay();
        togglePopup('hourglass-popup', 'hourglass-backdrop');
    });
    hourglassCloseButton.addEventListener('click', () => togglePopup('hourglass-popup', 'hourglass-backdrop'));
    hourglassBackdrop.addEventListener('click', () => togglePopup('hourglass-popup', 'hourglass-backdrop'));

    // Update time display every second when hourglass popup is open
    setInterval(() => {
        if (document.getElementById('hourglass-popup').classList.contains('open')) {
            updateTimeDisplay();
        }
    }, 1000);

    // Keyboard shortcuts for dharma and hourglass popups
    document.addEventListener('keydown', function(event) {
        // Only trigger if not typing in an input field and no modifier keys are pressed
        if (!event.ctrlKey && !event.metaKey && !event.isComposing && 
            !event.target.closest('input, textarea, select')) {
            
            // 'D' key toggles the dharma popup
            if (event.key.toLowerCase() === 'd') {
                event.preventDefault();
                loadRandomKoan();
                togglePopup('dharma-popup', 'dharma-backdrop');
            }
            
            // 'T' key toggles the time popup
            if (event.key.toLowerCase() === 't') {
                event.preventDefault();
                updateTimeDisplay();
                togglePopup('hourglass-popup', 'hourglass-backdrop');
            }
        }

        // ESC key closes any open popup
        if (event.key === 'Escape') {
            if (document.getElementById('dharma-popup').classList.contains('open')) {
                togglePopup('dharma-popup', 'dharma-backdrop');
            }
            if (document.getElementById('hourglass-popup').classList.contains('open')) {
                togglePopup('hourglass-popup', 'hourglass-backdrop');
            }
        }
    });
});
</script> 