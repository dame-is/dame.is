<!-- Floating Settings Button and Popup -->
<div class="settings-button-container">
  <button id="settings-toggle-button" class="settings-toggle-button" aria-label="Toggle settings">
    <span class="settings-emoji">⚙️</span>
  </button>
</div>

<!-- Backdrop for blur effect -->
<div id="settings-backdrop" class="settings-backdrop"></div>

<div id="settings-popup" class="settings-popup">
  <div class="settings-popup-header">
    <div class="settings-title-container">
      <h3 class="settings-title">Settings</h3>
      <div class="settings-subtitle">dame.is</div>
    </div>
    <div class="settings-header-actions">
      <button id="reset-settings" class="settings-reset-button" aria-label="Reset settings">↺</button>
      <button id="settings-close-button" class="settings-close-button" aria-label="Close settings">
        <span>✕</span>
      </button>
    </div>
  </div>
  <div class="settings-popup-content">
    <div id="settings-content" class="settings-content">
      <!-- Theme settings -->
      <div class="settings-group">
        <h4 class="settings-group-title">Theme</h4>
        <div class="settings-option">
          <label for="dark-mode-toggle" class="settings-option-label">Dark Mode</label>
          <div class="settings-option-control">
            <input type="checkbox" id="dark-mode-toggle" class="settings-checkbox" />
          </div>
        </div>
        <div class="settings-option">
          <label for="lofi-mode-toggle" class="settings-option-label">Lo-fi Mode</label>
          <div class="settings-option-control">
            <input type="checkbox" id="lofi-mode-toggle" class="settings-checkbox" />
          </div>
        </div>
        <div class="settings-option">
          <label for="font-family" class="settings-option-label">Font Family</label>
          <div class="settings-option-control">
            <select id="font-family" class="settings-select">
              <option value="arial">Sans-serif</option>
              <option value="times">Serif</option>
              <option value="mono">Monospace</option>
              <option value="comic">Cursive</option>
            </select>
          </div>
        </div>
        <div class="settings-option">
          <label for="font-size" class="settings-option-label">Font Size</label>
          <div class="settings-option-control">
            <select id="font-size" class="settings-select">
              <option value="small">Small</option>
              <option value="medium" selected>Medium</option>
              <option value="large">Large</option>
            </select>
          </div>
        </div>
      </div>

      <!-- Layout settings -->
      <div class="settings-group">
        <h4 class="settings-group-title">Layout</h4>
        <div class="settings-option">
          <label for="page-width" class="settings-option-label">Page Width</label>
          <div class="settings-option-control">
            <select id="page-width" class="settings-select">
              <option value="narrow" selected>Narrow</option>
              <option value="medium">Medium</option>
              <option value="wide">Wide</option>
            </select>
          </div>
        </div>
        <div class="settings-option">
          <label for="line-height" class="settings-option-label">Line Height</label>
          <div class="settings-option-control">
            <select id="line-height" class="settings-select">
              <option value="tight" selected>Tight</option>
              <option value="normal">Normal</option>
              <option value="loose">Loose</option>
            </select>
          </div>
        </div>
      </div>

      <!-- Navigation settings -->
      <div class="settings-group">
        <h4 class="settings-group-title">Navigation Bar</h4>
        <div class="settings-option">
          <label for="nav-alignment" class="settings-option-label">Navigation Alignment</label>
          <div class="settings-option-control">
            <select id="nav-alignment" class="settings-select">
              <option value="left">Left</option>
              <option value="center">Center</option>
              <option value="right">Right</option>
            </select>
          </div>
        </div>
        <div class="settings-option">
          <label for="show-pinned-links" class="settings-option-label">Show Pinned Links</label>
          <div class="settings-option-control">
            <input type="checkbox" id="show-pinned-links" class="settings-checkbox" checked />
          </div>
        </div>
        <div class="settings-option">
          <label for="show-social-icons" class="settings-option-label">Show Social Icons</label>
          <div class="settings-option-control">
            <input type="checkbox" id="show-social-icons" class="settings-checkbox" checked />
          </div>
        </div>
        <div class="settings-option">
          <label for="show-bluesky-stats" class="settings-option-label">Show Bluesky Stats</label>
          <div class="settings-option-control">
            <input type="checkbox" id="show-bluesky-stats" class="settings-checkbox" checked />
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Make toggleSettings function available globally
  window.toggleSettings = function() {
    const settingsPopup = document.getElementById('settings-popup');
    const settingsBackdrop = document.getElementById('settings-backdrop');
    
    if (settingsPopup.classList.contains('open')) {
      settingsPopup.classList.remove('open');
      settingsBackdrop.classList.remove('open');
      document.body.classList.remove('settings-open');
    } else {
      settingsPopup.classList.add('open');
      settingsBackdrop.classList.add('open');
      document.body.classList.add('settings-open');
      
      // Initialize settings values when opening
      initializeSettings();
    }
  };
  
  // Define the initialization function to be called when the DOM is loaded
  document.addEventListener('DOMContentLoaded', function() {
    // Get references to elements
    const toggleButton = document.getElementById('settings-toggle-button');
    const closeButton = document.getElementById('settings-close-button');
    const settingsPopup = document.getElementById('settings-popup');
    
    // Fix for first-time animation issues on mobile
    // We initially set the popup with no transition, then add it after a small delay
    settingsPopup.style.transition = 'none';
    setTimeout(function() {
      settingsPopup.style.transition = 'opacity 0.25s ease, transform 0.25s ease, visibility 0.25s';
    }, 100);
    
    // Initialize settings functionality
    function initializeSettings() {
      // Dark mode toggle initialization
      const darkModeToggle = document.getElementById('dark-mode-toggle');
      if (darkModeToggle) {
        // Set initial state based on current mode
        darkModeToggle.checked = document.body.classList.contains('dark-mode');
        
        // Add event listener
        darkModeToggle.addEventListener('change', function() {
          if (this.checked) {
            document.body.classList.add('dark-mode');
            localStorage.setItem('theme', 'dark');
          } else {
            document.body.classList.remove('dark-mode');
            localStorage.setItem('theme', 'light');
          }
        });
      }
      
      // Lo-fi mode toggle initialization
      const lofiModeToggle = document.getElementById('lofi-mode-toggle');
      if (lofiModeToggle) {
        // Get current state from localStorage or default to false
        const isLofiMode = localStorage.getItem('lofiMode') === 'true';
        
        // Set initial state
        lofiModeToggle.checked = isLofiMode;
        document.body.classList.toggle('lofi-mode', isLofiMode);
        
        // Add event listener
        lofiModeToggle.addEventListener('change', function() {
          document.body.classList.toggle('lofi-mode', this.checked);
          localStorage.setItem('lofiMode', this.checked);
          
          // Update navigation alignment based on lo-fi mode
          const navAlignmentSelect = document.getElementById('nav-alignment');
          if (this.checked) {
            // Switch to center alignment in lo-fi mode
            document.body.classList.remove('nav-align-left', 'nav-align-right');
            document.body.classList.add('nav-align-center');
            if (navAlignmentSelect) navAlignmentSelect.value = 'center';
            localStorage.setItem('navAlignment', 'center');
          } else {
            // Switch back to left alignment when disabling lo-fi mode
            document.body.classList.remove('nav-align-center', 'nav-align-right');
            document.body.classList.add('nav-align-left');
            if (navAlignmentSelect) navAlignmentSelect.value = 'left';
            localStorage.setItem('navAlignment', 'left');
          }
        });
      }
      
      // Font family selection initialization
      const fontFamilySelect = document.getElementById('font-family');
      if (fontFamilySelect) {
        // Get current font family from local storage or default to arial
        const currentFontFamily = localStorage.getItem('fontFamily') || 'arial';
        fontFamilySelect.value = currentFontFamily;
        
        // Remove any existing font family classes
        document.body.classList.remove('font-arial', 'font-times', 'font-mono', 'font-comic');
        // Add the current font family class
        document.body.classList.add(`font-${currentFontFamily}`);
        
        // Add event listener
        fontFamilySelect.addEventListener('change', function() {
          const newFont = this.value;
          // Remove any existing font family classes
          document.body.classList.remove('font-arial', 'font-times', 'font-mono', 'font-comic');
          // Add the new font family class
          document.body.classList.add(`font-${newFont}`);
          // Save to local storage
          localStorage.setItem('fontFamily', newFont);
        });
      }
      
      // Font size selection initialization
      const fontSizeSelect = document.getElementById('font-size');
      if (fontSizeSelect) {
        // Get current font size from local storage or default to medium
        const currentFontSize = localStorage.getItem('fontSize') || 'medium';
        fontSizeSelect.value = currentFontSize;
        
        // Add event listener
        fontSizeSelect.addEventListener('change', function() {
          const newSize = this.value;
          // Remove any existing font size classes
          document.body.classList.remove('font-small', 'font-medium', 'font-large');
          // Add the new font size class
          document.body.classList.add(`font-${newSize}`);
          // Save to local storage
          localStorage.setItem('fontSize', newSize);
        });
        
        // Apply the font size on load
        document.body.classList.add(`font-${currentFontSize}`);
      }

      // Navigation alignment initialization
      const navAlignmentSelect = document.getElementById('nav-alignment');
      if (navAlignmentSelect) {
        // Get current alignment from localStorage or default to left
        const currentAlignment = localStorage.getItem('navAlignment') || 'left';
        navAlignmentSelect.value = currentAlignment;
        
        // Remove any existing alignment classes
        document.body.classList.remove('nav-align-left', 'nav-align-center', 'nav-align-right');
        // Add the current alignment class
        document.body.classList.add(`nav-align-${currentAlignment}`);
        
        // Add event listener
        navAlignmentSelect.addEventListener('change', function() {
          const newAlignment = this.value;
          // Remove any existing alignment classes
          document.body.classList.remove('nav-align-left', 'nav-align-center', 'nav-align-right');
          // Add the new alignment class
          document.body.classList.add(`nav-align-${newAlignment}`);
          // Save to local storage
          localStorage.setItem('navAlignment', newAlignment);
        });
      }

      // Navigation visibility settings initialization
      const pinnedLinksToggle = document.getElementById('show-pinned-links');
      const socialIconsToggle = document.getElementById('show-social-icons');
      const blueskyStatsToggle = document.getElementById('show-bluesky-stats');

      if (pinnedLinksToggle && socialIconsToggle && blueskyStatsToggle) {
        // Get current states from localStorage or default to true
        const showPinnedLinks = localStorage.getItem('showPinnedLinks') !== 'false';
        const showSocialIcons = localStorage.getItem('showSocialIcons') !== 'false';
        const showBlueskyStats = localStorage.getItem('showBlueskyStats') !== 'false';

        // Set initial states
        pinnedLinksToggle.checked = showPinnedLinks;
        socialIconsToggle.checked = showSocialIcons;
        blueskyStatsToggle.checked = showBlueskyStats;

        // Apply initial states to the nav sections
        document.body.classList.toggle('hide-pinned-links', !showPinnedLinks);
        document.body.classList.toggle('hide-social-icons', !showSocialIcons);
        document.body.classList.toggle('hide-bluesky-stats', !showBlueskyStats);

        // Add event listeners
        pinnedLinksToggle.addEventListener('change', function() {
          document.body.classList.toggle('hide-pinned-links', !this.checked);
          localStorage.setItem('showPinnedLinks', this.checked);
        });

        socialIconsToggle.addEventListener('change', function() {
          document.body.classList.toggle('hide-social-icons', !this.checked);
          localStorage.setItem('showSocialIcons', this.checked);
        });

        blueskyStatsToggle.addEventListener('change', function() {
          document.body.classList.toggle('hide-bluesky-stats', !this.checked);
          localStorage.setItem('showBlueskyStats', this.checked);
        });
      }

      // Page width selection initialization
      const pageWidthSelect = document.getElementById('page-width');
      if (pageWidthSelect) {
        // Get current page width from local storage or default to narrow
        const currentPageWidth = localStorage.getItem('pageWidth') || 'narrow';
        pageWidthSelect.value = currentPageWidth;
        
        // Remove any existing page width classes
        document.body.classList.remove('page-narrow', 'page-medium', 'page-wide');
        // Add the current page width class
        document.body.classList.add(`page-${currentPageWidth}`);
        
        // Add event listener
        pageWidthSelect.addEventListener('change', function() {
          const newWidth = this.value;
          // Remove any existing page width classes
          document.body.classList.remove('page-narrow', 'page-medium', 'page-wide');
          // Add the new page width class
          document.body.classList.add(`page-${newWidth}`);
          // Save to local storage
          localStorage.setItem('pageWidth', newWidth);
        });
      }

      // Line height selection initialization
      const lineHeightSelect = document.getElementById('line-height');
      if (lineHeightSelect) {
        // Get current line height from local storage or default to tight
        const currentLineHeight = localStorage.getItem('lineHeight') || 'tight';
        lineHeightSelect.value = currentLineHeight;
        
        // Remove any existing line height classes
        document.body.classList.remove('line-tight', 'line-normal', 'line-loose');
        // Add the current line height class
        document.body.classList.add(`line-${currentLineHeight}`);
        
        // Add event listener
        lineHeightSelect.addEventListener('change', function() {
          const newHeight = this.value;
          // Remove any existing line height classes
          document.body.classList.remove('line-tight', 'line-normal', 'line-loose');
          // Add the new line height class
          document.body.classList.add(`line-${newHeight}`);
          // Save to local storage
          localStorage.setItem('lineHeight', newHeight);
        });
      }
    }
    
    // Add all the functions to the global scope
    window.initializeSettings = initializeSettings;
    
    // Add event listeners to toggle settings
    toggleButton.addEventListener('click', window.toggleSettings);
    closeButton.addEventListener('click', window.toggleSettings);
    
    // Make settings toggle work with 'S' key shortcut
    document.addEventListener('keydown', function(event) {
      // 'S' key toggles the settings
      if (event.key === 's' && !event.ctrlKey && !event.metaKey && 
          !event.isComposing && !event.target.closest('input, textarea, select')) {
        event.preventDefault();
        window.toggleSettings();
      }
      
      // ESC key closes the settings
      if (event.key === 'Escape' && document.getElementById('settings-popup').classList.contains('open')) {
        window.toggleSettings();
      }
    });
    
    // Add click event to backdrop to close settings
    const settingsBackdrop = document.getElementById('settings-backdrop');
    settingsBackdrop.addEventListener('click', window.toggleSettings);

    // Reset settings functionality
    const resetButton = document.getElementById('reset-settings');
    if (resetButton) {
      resetButton.addEventListener('click', function() {
        // Clear all settings from localStorage
        localStorage.removeItem('theme');
        localStorage.removeItem('lofiMode');
        localStorage.removeItem('fontFamily');
        localStorage.removeItem('fontSize');
        localStorage.removeItem('showPinnedLinks');
        localStorage.removeItem('showSocialIcons');
        localStorage.removeItem('showBlueskyStats');

        // Reset dark mode
        document.body.classList.remove('dark-mode');
        const darkModeToggle = document.getElementById('dark-mode-toggle');
        if (darkModeToggle) darkModeToggle.checked = false;

        // Reset lo-fi mode
        document.body.classList.remove('lofi-mode');
        const lofiModeToggle = document.getElementById('lofi-mode-toggle');
        if (lofiModeToggle) lofiModeToggle.checked = false;

        // Reset navigation alignment to left
        document.body.classList.remove('nav-align-center', 'nav-align-right');
        document.body.classList.add('nav-align-left');
        const navAlignmentSelect = document.getElementById('nav-alignment');
        if (navAlignmentSelect) navAlignmentSelect.value = 'left';
        localStorage.setItem('navAlignment', 'left');

        // Reset font family to Arial
        document.body.classList.remove('font-arial', 'font-times', 'font-mono', 'font-comic');
        document.body.classList.add('font-arial');
        const fontFamilySelect = document.getElementById('font-family');
        if (fontFamilySelect) fontFamilySelect.value = 'arial';

        // Reset font size to medium
        document.body.classList.remove('font-small', 'font-medium', 'font-large');
        document.body.classList.add('font-medium');
        const fontSizeSelect = document.getElementById('font-size');
        if (fontSizeSelect) fontSizeSelect.value = 'medium';

        // Reset navigation settings
        document.body.classList.remove('hide-pinned-links', 'hide-social-icons', 'hide-bluesky-stats');
        const pinnedLinksToggle = document.getElementById('show-pinned-links');
        const socialIconsToggle = document.getElementById('show-social-icons');
        const blueskyStatsToggle = document.getElementById('show-bluesky-stats');
        if (pinnedLinksToggle) pinnedLinksToggle.checked = true;
        if (socialIconsToggle) socialIconsToggle.checked = true;
        if (blueskyStatsToggle) blueskyStatsToggle.checked = true;

        // Reset page width to narrow
        document.body.classList.remove('page-narrow', 'page-medium', 'page-wide');
        document.body.classList.add('page-narrow');
        const pageWidthSelect = document.getElementById('page-width');
        if (pageWidthSelect) pageWidthSelect.value = 'narrow';
        localStorage.setItem('pageWidth', 'narrow');

        // Reset line height to tight
        document.body.classList.remove('line-tight', 'line-normal', 'line-loose');
        document.body.classList.add('line-tight');
        const lineHeightSelect = document.getElementById('line-height');
        if (lineHeightSelect) lineHeightSelect.value = 'tight';
        localStorage.setItem('lineHeight', 'tight');
      });
    }

    // Initialize settings on page load
    initializeSettings();
  });
</script> 