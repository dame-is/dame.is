---
layout: base
---
{% block head %}
<!-- Open Graph Metadata -->
<meta property="og:title" content="{{ title }}">
<meta property="og:description" content="{{ excerpt }}">
<meta property="og:image" content="{{ ogImage }}">
<meta property="og:url" content="https://dame.is{{ page.url }}">
<meta property="og:type" content="article">
<link rel="stylesheet" href="https://unpkg.com/bluesky-comments@0.11.1/dist/bluesky-comments.css">
{% endblock %}

<article class="blog-post">
    <h1 id="post-title">{{ title }}</h1>
    <p id="post-date" class="blog-post-date" data-date="{{ date | jsDateString }}">{{ date | date }} {{ time }}</p>
    
    <div id="post-content">
        {{ content | safe }}
    </div>

    {% if showNewsletter %}
    <section id="newsletter-section">
        <div id="newsletter-header">
            <h2>Subscribe to my email newsletter</h2>
        </div>

        <div id="newsletter-form">
            <form action="https://buttondown.com/api/emails/embed-subscribe/dame" method="post" target="popupwindow" onsubmit="window.open('https://buttondown.com/dame', 'popupwindow')" class="embeddable-buttondown-form">
                <label for="bd-email">Email Address</label>
                <input type="email" name="email" id="bd-email" placeholder="username@gmail.com">
                <label for="bsky-handle">Bluesky Handle (Optional)</label>
                <input type="text" name="metadata__bsky-handle" id="bsky-handle" placeholder="username.bsky.social">
                <label for="name">Name or Pseudonym (Optional)</label>
                <input type="text" name="metadata__name" id="name" placeholder="Name">
                <input type="submit" value="Subscribe">
                <input type="hidden" name="tag" value="{{ title | slugify }}">
                <input type="hidden" name="tag" value="personal-site">
            </form>
        </div>
    </section>
    {% endif %}

    {% if blueskyUri %}
    <section id="comments-section">
        <div id="bluesky-comments" data-uri="{{ blueskyUri }}"></div>
    </section>
    {% endif %}
</article>

{% block scripts %}
<script type="importmap">
    {
      "imports": {
        "react": "https://esm.sh/react@18",
        "react-dom/client": "https://esm.sh/react-dom@18/client"
      }
    }
</script>
<script type="module" src="/js/comments-init.js"></script>
<script src="/js/svg-icons.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Format post date
        const postDateElement = document.getElementById('post-date');
        if (postDateElement) {
            const dateStr = postDateElement.getAttribute('data-date');
            if (dateStr) {
                const date = new Date(dateStr);
                
                // Using the existing formatting functions from main.js
                const dayOfLife = getDaysSinceBirthdate(date);
                
                // Calculate relative time using the Intl.RelativeTimeFormat
                const now = new Date();
                const diffInSeconds = Math.floor((now - date) / 1000);
                
                let relativeTime = 'just now';
                const intervals = [
                    { label: 'year', seconds: 31536000 },
                    { label: 'month', seconds: 2592000 },
                    { label: 'week', seconds: 604800 },
                    { label: 'day', seconds: 86400 },
                    { label: 'hour', seconds: 3600 },
                    { label: 'minute', seconds: 60 },
                    { label: 'second', seconds: 1 }
                ];
                
                for (const interval of intervals) {
                    const count = Math.floor(diffInSeconds / interval.seconds);
                    if (count >= 1) {
                        relativeTime = new Intl.RelativeTimeFormat(undefined, { numeric: 'auto' }).format(-count, interval.label);
                        break;
                    }
                }
                
                // Format the date explicitly for display
                const formattedDate = date.toLocaleDateString(undefined, {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                });
                
                postDateElement.textContent = `${relativeTime[0].toUpperCase() + relativeTime.slice(1)}, ${formattedDate} (Day ${dayOfLife})`;
            }
        }
        
        // Ensure the outbound links processor runs after the page loads
        if (typeof processOutboundLinks === 'function') {
            processOutboundLinks();
        }
    });
</script>
{% endblock %}