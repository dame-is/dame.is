name: Versioning

on:
  push:
    branches:
      - main

permissions:
  contents: write  # Grants write access to repository contents, including tags

jobs:
  bump-version:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for all tags and branches

      # Step 2: Set Up Node.js Environment (Optional but useful for scripting)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'  # Specify the Node.js version you prefer

      # Step 3: Determine Version Bump Type
      - name: Determine version bump
        id: bump_type
        run: |
          # Fetch the latest tag that matches the pattern vX.Y.Z
          latest_tag=$(git tag -l 'v*.*.*' --sort=-v:refname | head -n 1)
          echo "Latest tag: $latest_tag"
          
          if [ -z "$latest_tag" ]; then
            # No tags found, initialize to v1.0.0
            bump_type="minor"
          else
            # Extract commit messages since the latest tag
            commits=$(git log $latest_tag..HEAD --pretty=format:%s)
            echo "Commits since latest tag:"
            echo "$commits"

            # Determine bump type based on commit messages
            if echo "$commits" | grep -qE 'BREAKING CHANGE|^feat!'; then
              bump_type="major"
            elif echo "$commits" | grep -qE '^feat:'; then
              bump_type="minor"
            else
              bump_type="patch"
            fi
          fi

          echo "bump_type=$bump_type" >> $GITHUB_OUTPUT

      # Step 4: Get Latest Tag and Calculate New Version
      - name: Get Latest Tag and Increment Version
        id: get_new_version
        run: |
          latest_tag=$(git tag -l 'v*.*.*' --sort=-v:refname | head -n 1)
          echo "Latest tag: $latest_tag"

          if [ -z "$latest_tag" ]; then
            # No tags found, start at v1.0.0
            major=1
            minor=0
            patch=0
          else
            # Extract major, minor, patch numbers
            major=$(echo "$latest_tag" | cut -d. -f1 | tr -d 'v')
            minor=$(echo "$latest_tag" | cut -d. -f2)
            patch=$(echo "$latest_tag" | cut -d. -f3)
          fi

          # Retrieve the bump type from previous step
          bump_type="${{ steps.bump_type.outputs.bump_type }}"
          echo "Bump type: $bump_type"

          # Increment version based on bump type
          if [ "$bump_type" == "major" ]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [ "$bump_type" == "minor" ]; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi

          # Formulate the new tag
          new_tag="v$major.$minor.$patch"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      # Step 5: Create and Push the New Tag
      - name: Create New Tag
        run: |
          git tag "${{ steps.get_new_version.outputs.new_tag }}"
          git push origin "${{ steps.get_new_version.outputs.new_tag }}"

      # Step 6: Generate Last Updated JSON
      - name: Generate Last Updated JSON
        id: generate_last_updated
        run: |
          echo "{" > last-updated.json

          # ----------- Process Markdown pages -----------
          echo "Processing markdown files..."
          # Find all .md files excluding node_modules
          mapfile -t md_files < <(find . -type f -name "*.md" -not -path "./node_modules/*" -not -path "./_site/*" -not -path "./.git/*")

          for md_file in "${md_files[@]}"
          do
            echo "Processing markdown file: $md_file"

            # Get the last commit date for the .md file
            last_commit_date=$(git log -1 --format=%cd --date=iso "$md_file")
            echo "Last commit date: $last_commit_date"

            if [ -n "$last_commit_date" ]; then
              # Format the date as ISO 8601 (e.g., 2023-08-25T14:35:22Z)
              formatted_date=$(date -u -d "$last_commit_date" +"%Y-%m-%dT%H:%M:%SZ")
              
              # Determine the appropriate key based on the file path
              rel_path=${md_file#./}  # Remove leading ./
              
              # Extract the key from the path
              if [[ "$rel_path" == "index.md" ]]; then
                # Handle root index.md specially
                key="index"
              elif [[ "$rel_path" == "writing/blogs/"* ]]; then
                # Handle blog posts
                slug=$(basename "$rel_path" .md)
                key="blog/${slug}"
              elif [[ "$rel_path" == "writing/posts/"* ]]; then
                # Handle posts
                key="posts"
              elif [[ "$rel_path" == "sharing/beliefs/"* ]]; then
                # Handle beliefs pages
                key="beliefs"
              else
                # For other pages, use the filename without extension
                key=$(basename "$rel_path" .md)
              fi
              
              echo "Generated key: $key for file: $rel_path"
              echo "  \"$key\": \"$formatted_date\"," >> last-updated.json
            fi
          done

          # ----------- Process NJK templates -----------
          echo "Processing njk templates..."
          # Find all .njk files excluding node_modules
          mapfile -t njk_files < <(find . -type f -name "*.njk" -not -path "./node_modules/*" -not -path "./_site/*" -not -path "./.git/*")

          for njk_file in "${njk_files[@]}"
          do
            # Only process page templates, not layouts or includes
            if [[ "$njk_file" != *"_layouts/"* && "$njk_file" != *"_includes/"* ]]; then
              echo "Processing template: $njk_file"

              # Get the last commit date for the file
              last_commit_date=$(git log -1 --format=%cd --date=iso "$njk_file")
              echo "Last commit date: $last_commit_date"

              if [ -n "$last_commit_date" ]; then
                # Format the date as ISO 8601
                formatted_date=$(date -u -d "$last_commit_date" +"%Y-%m-%dT%H:%M:%SZ")
                
                # Determine the appropriate key based on the file path
                rel_path=${njk_file#./}  # Remove leading ./
                
                # Extract the key from the path
                if [[ "$rel_path" == "index.njk" ]]; then
                  key="index"
                else
                  # For other pages, use the filename without extension
                  key=$(basename "$rel_path" .njk)
                fi
                
                echo "Generated key: $key for template: $rel_path"
                echo "  \"$key\": \"$formatted_date\"," >> last-updated.json
              fi
            fi
          done

          # Remove the trailing comma from the last entry
          sed -i '$ s/,$//' last-updated.json

          echo "}" >> last-updated.json

      # Step 7: Commit Last Updated JSON
      - name: Commit Last Updated JSON
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add last-updated.json
          git commit -m "Add last-updated.json with latest commit dates" || echo "No changes to commit"
          git push origin main
